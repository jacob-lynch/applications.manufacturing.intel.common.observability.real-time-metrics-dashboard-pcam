<QueryConfig AutoExecuteQueryOnLoad="false" PreventSQLBeautification="false">
  <ChangeLog>Changed by GER\mfg_rlouk on 8/10/2017 9:40:33 AM from F28PAP216N13.F28PROD.MFG.INTEL.COM using LogAnalyzer2 v2.9.61013.0546</ChangeLog>
  <ChangeLog>Changed by GER\mfg_rlouk on 6/15/2017 8:22:54 AM from F28PAP216N13.F28PROD.MFG.INTEL.COM using LogAnalyzer2 v2.9.61013.0546</ChangeLog>
  <ChangeLog>Changed by GER\mfg_rlouk on 6/15/2017 8:22:50 AM from F28PAP216N13.F28PROD.MFG.INTEL.COM using LogAnalyzer2 v2.9.61013.0546</ChangeLog>
  <ChangeLog>Changed by GER\mfg_rlouk on 5/11/2017 10:09:39 AM from F28PAP216N13.F28PROD.MFG.INTEL.COM using LogAnalyzer2 v2.9.61013.0546</ChangeLog>
  <ChangeLog>Changed by GER\mfg_hgurarie on 8/28/2016 4:27:11 PM from F28PAP216N3.F28PROD.MFG.INTEL.COM using LogAnalyzer2 v2.9.51126.1153</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/30/2015 1:04:10 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/30/2015 12:32:38 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/29/2015 2:52:24 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 4:26:50 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 3:45:53 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 3:43:00 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 12:35:53 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 12:16:56 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 11:49:16 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/22/2015 11:47:28 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/16/2015 11:47:57 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/16/2015 9:31:12 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/16/2015 9:11:52 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/16/2015 9:11:48 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 2/25/2015 5:53:36 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 11/6/2014 9:39:43 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 11/6/2014 9:39:00 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 11/6/2014 9:38:52 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 11/6/2014 9:31:45 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 11/6/2014 9:27:46 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <UNIQECredentials UserId="uber" Site="rf3sap110-alias.rf3stg.mfgint.intel.com" DataSource="D1D_STAG_LogAnalyzer" SaveCredentials="true" UseUNIQECredentialsOnStartUp="false" QueryTimeOutInSeconds="-1">
    <Password />
    <Name />
  </UNIQECredentials>
  <QueryAttributes>
    <OutputDateFormat>yyyy.ww.w</OutputDateFormat>
    <AlwaysReplaceDomainWithLocal>false</AlwaysReplaceDomainWithLocal>
  </QueryAttributes>
  <PostQuerySQL>select * from %{OUTPUT}</PostQuerySQL>
  <TableLayoutConfig>
    <BoundColumnList>EntityType,AR,Net,PCAM,SC,UI,APC,AsIs,D1X,L8,MCS,WC,WStn,ID,YAS,SPC</BoundColumnList>
  </TableLayoutConfig>
  <RowHighlightingRules Enable="true" ColumnName="Globals" FilterRegex="O" RowColorString="NamedColor:White" />
  <RowHighlightingRules Enable="true" ColumnName="Platforms" FilterRegex="O" RowColorString="NamedColor:White" />
  <RowHighlightingRules Enable="true" ColumnName="AWIT" FilterRegex="O" RowColorString="NamedColor:White" />
  <RowHighlightingRules Enable="true" ColumnName="Pingable_WC" FilterRegex="Pingable" RowColorString="NamedColor:Lime" />
  <RowHighlightingRules Enable="true" ColumnName="Pingable_WC" FilterRegex="" RowColorString="NamedColor:White" />
  <TabOrder>C0,G0,G1,G2,G3</TabOrder>
  <MainPivotConfig>
    <ColumnX FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnY FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnData FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <CustomPalette />
    <TableData />
  </MainPivotConfig>
  <OutputDataGridConfig Name="Open Tickets">
    <SQL>---Begin Main Query---
SELECT
	Number, Link, State, KA, Category, Location, AssigneeUserName, CreatedOn, UpdatedOn, Description, DetailedDescription
FROM
	%{OUTPUT}
WHERE
	State like '%Active%' or state like '%Awaiting%'
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>COUNT(ALL *)</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema />
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Closed Tickets">
    <SQL>---Begin Main Query---
SELECT
	Number, Link, State, KA, AssigneeUserName, Category, Location, CreatedOn, UpdatedOn, Description, DetailedDescription
FROM
	%{OUTPUT}
WHERE
	State = 'Resolved'
ORDER BY
	CreatedOn desc
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>COUNT(ALL *)</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Number" type="xs:string" minOccurs="0" />
              <xs:element name="Link" type="xs:string" minOccurs="0" />
              <xs:element name="State" type="xs:string" minOccurs="0" />
              <xs:element name="KA" type="xs:string" minOccurs="0" />
              <xs:element name="AssigneeUserName" type="xs:string" minOccurs="0" />
              <xs:element name="Category" type="xs:string" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="CreatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="UpdatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Description" type="xs:string" minOccurs="0" />
              <xs:element name="DetailedDescription" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Open">
    <SQL>---Begin Main Query---
SELECT
	count(*) as Open
FROM
	%{OUTPUT}
WHERE
	State like '%Active%' or state like '%Awaiting%'
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>Open</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Open" type="xs:int" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Closed">
    <SQL>---Begin Main Query---
SELECT
	count(*) as Closed
FROM
	%{OUTPUT}
WHERE
	State = 'Resolved'
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>Closed</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Closed" type="xs:int" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <AutoPivotConfig OutputDateFormat="yyyy ww.w hh tt" />
  <MailConfig>
    <PostProcessingSQL Enable="false" />
    <EmailCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
      <Script />
    </EmailCondition>
    <PostProcessingCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </PostProcessingCondition>
    <CopyCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </CopyCondition>
    <SMTPServer>smtp.intel.com</SMTPServer>
    <From>LogAnalyzer2@intel.com</From>
    <ReplyTo>@{DASHBOARD_OWNER_ALERT_DIST}</ReplyTo>
    <To />
    <Subject>[${DOMAIN}] Incident Data</Subject>
    <Body />
    <MailAttachments FileNamingFormat="${SETTINGS}" Excel="false" CSV="false" LAS="false" LAD="false" Exceptions="false" StatusLogs="false" PivotChart="true" ZipAttachments="false" DoNotSendAttachmentsWithEmail="false" IncludeJobStatisticsHeader="false" IncludeQuerySettingsFileHeader="false" IncludeVariableDefinitionHeader="false" IncludeRowCountInSubject="false" />
    <IncludeSQLQueryInBody>false</IncludeSQLQueryInBody>
    <TableInBody Enable="true">
      <SQL />
    </TableInBody>
    <CopyOutputToDirectory>true</CopyOutputToDirectory>
    <OutputDirectory>@{DASHBOARD_WEB_SPOOL}\PCAM\Output</OutputDirectory>
    <IncludeAutoPivotSummary>false</IncludeAutoPivotSummary>
    <IncludeCustomPivotSummary>false</IncludeCustomPivotSummary>
    <IgnoreExceptions>false</IgnoreExceptions>
    <OnlyCopyOutputIfEmailConditionIsMet>false</OnlyCopyOutputIfEmailConditionIsMet>
  </MailConfig>
  <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Number" type="xs:string" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="Category" type="xs:string" minOccurs="0" />
              <xs:element name="Link" type="xs:string" minOccurs="0" />
              <xs:element name="State" type="xs:string" minOccurs="0" />
              <xs:element name="KA" type="xs:string" minOccurs="0" />
              <xs:element name="AssigneeUserName" type="xs:string" minOccurs="0" />
              <xs:element name="CreatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="UpdatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Description" type="xs:string" minOccurs="0" />
              <xs:element name="DetailedDescription" type="xs:string" minOccurs="0" />
              <xs:element name="Product" type="xs:string" minOccurs="0" />
              <xs:element name="CustomerUserName" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
  <TableData />
  <LastRunAbsoluteDateFilter />
  <CustomQueryMethodScripts>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Text.RegularExpressions;
using Intel.LogAnalyzer;
using Intel.LogAnalyzer.Common;
using Intel.LogAnalyzer.Configuration;
using Intel.LogAnalyzer.Utility;

namespace Intel.LogAnalyzer.BuiltInQueryMethods_Sample
{
    public class CalculateRunningSum : CustomQueryMethodBase
    {

        /// &lt;summary&gt;
        /// Test harness
        /// &lt;/summary&gt;
        [STAThread]
        private static void Main()
        {
            new CalculateRunningSum
            {
                InputFile = @"D:\Temp\test.csv",
                ColumnToCalculateSumFor = "Total",
                PivotColumn = "MetSLA",
                NewColumnForRunningSum = "RunningTotal",
                NewColumnForAbsoluteRunningSum = "AbsoluteRunningTotal"
            }.Test();
        }

        // Output type is QueryResult
        public override CustomQueryOutputType OutputType { get { return CustomQueryOutputType.QueryResult; } }

        public override string Description
        {
            get { return "Get Running Sum for a Column in the Table"; }
        }

        [Description("Input CSV file")]
        public string InputFile { get; set; }
        
        [Description("Input CSV file")]
        public string ColumnToCalculateSumFor { get; set; }
        
        [Description("Pivot column (optional)")]
        [DefaultValue("")]
        public string PivotColumn { get; set; }

        [Description("New column to be added with running sum")]
        [DefaultValue("RunningSum")]
        public string NewColumnForRunningSum { get; set; }
        
        [Description("New column to be added with absolute running sum which ignores the pivot column")]
        [DefaultValue("")]
        public string NewColumnForAbsoluteRunningSum { get; set; }

        public override QueryResult GetQueryResult()
        {
            DataTable table = UtilityMethods.ConvertCSVFileToDataTable(InputFile, true);
            int colIndex = GetColumnIndex(table, ColumnToCalculateSumFor, true);
            int pivotIndex = -1;

            if (PivotColumn.Trim().Length &gt; 0)
            {
                pivotIndex = GetColumnIndex(table, PivotColumn, true);
            }

            table.Columns.Add(NewColumnForRunningSum, typeof(double));
            int newColIndex = GetColumnIndex(table, NewColumnForRunningSum);

            NewColumnForAbsoluteRunningSum = NewColumnForAbsoluteRunningSum.Trim();
            int newAbsColIndex = -1;
            if (NewColumnForAbsoluteRunningSum.Length &gt; 0)
            {
                table.Columns.Add(NewColumnForAbsoluteRunningSum, typeof(double));
                newAbsColIndex = GetColumnIndex(table, NewColumnForAbsoluteRunningSum);
            }

            Dictionary&lt;string, double&gt; dict = new Dictionary&lt;string, double&gt;();
            double absoluteSum = 0.0;

            foreach (DataRow row in table.Rows)
            {
                string key = string.Empty;
                if (pivotIndex &gt;= 0)
                {
                    key = row[pivotIndex].ToStringEx();
                }
                double value = Convert.ToDouble(row[colIndex]);
                absoluteSum += value;
                double sum;
                if (dict.TryGetValue(key, out sum))
                {
                    sum += value;
                    dict[key] = sum;
                }
                else
                {
                    sum = value;
                    dict.Add(key, sum);
                }
                row[newColIndex] = sum;
                if (newAbsColIndex &gt;= 0)
                {
                    row[newAbsColIndex] = absoluteSum;
                }
            }
           
            return new QueryResult(table);
        }

    }
}</CustomQueryMethodScripts>
  <PivotGroupingSettings Enable="true" PivotColumn="State">
    <SortyByColumn>Count</SortyByColumn>
  </PivotGroupingSettings>
  <QuerySQL><![CDATA[
--[FileName:"T:\Dashboard\Jobs\PCAM\1-hr\ISMP_Incident_Level1_Query.lasx"]------
----------<VARIABLES>------------
var TIMEFILTER = ""
var FILEFILTER = "GC://corpad.intel.com/DC=corp,DC=intel,DC=com"
var DEPARTMENT_LIST = "(|(department=61840)(department=30385)(department=31355)(department=46340))"
var SQL_NODE = "@{ISMP_SQL_NODE}"
var CATALOG = "@{ISMP_CATALOG}"
var TASKLINK = "https://itsm.intel.com/incident.do?sysparm_query=numberSTARTSWITH"
var TASKPOST = "&sysparm_view=Mfg&sysparm_view_forced=true"
var SQL_QUERY = "select t.Number, t.Category as Cattemp, t.AssociatedKnowledgeArticle, t.Location, t.State, t.Product, t.AssigneeUserName, t.CreatedOn, t.UpdatedOn, t.Description, t.DetailedDescription, t.CustomerUserName
from tblWebServiceIncidents t WITH (NOLOCK)
inner join 
	(select Number, max(UpdatedOn) as MaxUpdated
	from tblWebServiceIncidents WITH (NOLOCK) group by Number) m
on t.Number = m.Number
and t.UpdatedOn = m.MaxUpdated
where (t.service = 'Fab Sort Manufacturing Automation' or t.service = 'Shop Floor Control and Integration')
and t.location like 'F%Factory'
and (t.Supportskill = 'FS AIT/CI - Auto Integration/Config' or
     t.Supportskill = 'FS AMHS-PCAM Configurations' or
     t.Supportskill = 'FS AMO - Automated Mfg Ops L7/L8' or
     t.Supportskill =  'FS PCS-PCAM Configurations' or
     t.Supportskill = 'FS PDT-PCAM Configurations' or
     t.Supportskill = 'FS SC - Station Controller' or
     t.Supportskill = 'FS SFC-PCAM Configurations' or
     t.Supportskill like '%PCAM%' or 
     t.Supportskill like 'SFCI PIC%' or
     t.Supportskill like 'SFCI Die%' or
     t.Supportskill like '%Station Controllers' or
     t.Supportskill='SFCI Equipment Modeling' or
     t.Supportskill='SFCI Wip Modeling' or
     t.Supportskill='SFCI Scheduler Rules'     )
and t.processrole = 'Incident Specialist Level 1'
order by CreatedOn desc"
---[OLEDB_CSV]---
BEGIN OLEDB_CSV
	UseMethod QueryOLEDB with -- **Run an OLEDB query**
		ConnectionString = "Provider=SQLOLEDB.1;User ID=Barnum_Reader;Password=9JJ4FnImoODJ252pKFIy;Persist Security Info=True;Data Source=${SQL_NODE}; Initial Catalog=${CATALOG};" -- OLEDB connection string [String]
		Query = "${SQL_QUERY}" -- SQL Query to run against OLEDB provider [String]
END OLEDB_CSV
---Begin Main Query---
Using CSV with
SELECT
	distinct
	Number,
	Location,
	Category,
	Link,
	State,
	AssociatedKnowledgeArticle as KA,
	AssigneeUserName,
	CreatedOn,
	UpdatedOn,
	Description,
	DetailedDescription,
	Product,
	CustomerUserName
USING
	case Cattemp when 'RequestForInformation' then 'HDI' else Cattemp end as Category,
	strcat(strcat('${TaskLink}',Number),'${TaskPost}') as Link
FROM
	%{oledb_csv}
WHERE
	applytimerangefilter(CreatedOn, 'last 10 days')

]]></QuerySQL>
</QueryConfig>