<QueryConfig AutoExecuteQueryOnLoad="false">
  <ChangeLog>Changed by AMR\mfg_tcalford on 11/5/2015 7:44:40 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/24/2014 11:37:03 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/24/2014 11:35:01 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/24/2014 8:32:16 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/24/2014 8:32:03 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/23/2014 4:45:48 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/23/2014 9:27:56 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/23/2014 9:09:59 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/11/2014 12:56:06 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/11/2014 11:25:33 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/11/2014 11:22:42 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/11/2014 11:20:33 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/11/2014 11:20:10 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/11/2014 11:04:08 AM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 2:04:33 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 2:04:06 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:58:55 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:47:18 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:46:53 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:46:31 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:43:49 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:41:32 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:39:05 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:38:52 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 12/4/2014 1:32:28 PM from RF3PAP216N3.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <QueryAttributes>
    <OutputDateFormat>yyyy/MM/dd HH:mm:ss</OutputDateFormat>
    <RowThresholdForPivotGrid>1000000</RowThresholdForPivotGrid>
    <AlwaysReplaceDomainWithLocal>false</AlwaysReplaceDomainWithLocal>
  </QueryAttributes>
  <PostQuerySQL>select * from %{OUTPUT}</PostQuerySQL>
  <TableLayoutConfig>
    <BoundColumnList>DateTime,NodeName,EventLog,EventID,EventTypeName,Category,SourceName,UserID,Message,Strings</BoundColumnList>
  </TableLayoutConfig>
  <RowHighlightingRules Enable="true" ColumnName="*" FilterRegex="Error" RowColorString="NamedColor:Red" />
  <RowHighlightingRules Enable="true" ColumnName="*" FilterRegex="Warning" RowColorString="NamedColor:Yellow" />
  <TabOrder>C0</TabOrder>
  <MainPivotConfig>
    <ColumnX FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnY FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnData FieldName="COUNT OF" FieldType="Int32" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <DateFormat>Auto</DateFormat>
    <CustomPalette />
    <TableData />
  </MainPivotConfig>
  <AutoPivotConfig OutputDateFormat="yyyy ww.w HH:mm" StatisticalFunctionsForColumn="Avg, 50, 90,96, Count" />
  <MailConfig>
    <PostProcessingSQL Enable="false" />
    <EmailCondition Enable="true" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
      <Script />
    </EmailCondition>
    <PostProcessingCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </PostProcessingCondition>
    <CopyCondition Enable="false" Operator="&gt;" ThresholdRowCount="">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </CopyCondition>
    <SMTPServer>smtp.intel.com</SMTPServer>
    <From>LogAnalyzer2@intel.com</From>
    <ReplyTo>@{DASHBOARD_OWNER_ALERT_DIST}</ReplyTo>
    <To />
    <Subject>Winclient Reboots Number </Subject>
    <Body />
    <OnlyProcessIfOutputChangedFromPreviousRun>false</OnlyProcessIfOutputChangedFromPreviousRun>
    <MailAttachments FileNamingFormat="${SETTINGS}_yyyyMMdd" Excel="false" LAS="false" LAD="false" Exceptions="false" StatusLogs="false" PivotChart="false" ZipAttachments="false" DoNotSendAttachmentsWithEmail="false" IncludeJobStatisticsHeader="false" IncludeQuerySettingsFileHeader="false" IncludeVariableDefinitionHeader="false" IncludeRowCountInSubject="false" />
    <IncludeSQLQueryInBody>false</IncludeSQLQueryInBody>
    <TableInBody Enable="false">
      <SQL />
    </TableInBody>
    <CopyOutputToDirectory>true</CopyOutputToDirectory>
    <OutputDirectory>@{DASHBOARD_PERSIST_DATA}\PCAM\Output\WinclientPM</OutputDirectory>
    <IncludeAutoPivotSummary>false</IncludeAutoPivotSummary>
    <IgnoreExceptions>false</IgnoreExceptions>
    <OnlyCopyOutputIfEmailConditionIsMet>false</OnlyCopyOutputIfEmailConditionIsMet>
  </MailConfig>
  <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Total" type="xs:int" minOccurs="0" />
              <xs:element name="Date" type="xs:dateTime" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
  <TableData />
  <LastRunAbsoluteDateFilter />
  <CustomSQLFunctionScripts>using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using Intel.LogAnalyzer.Common;
using Intel.LogAnalyzer.Utility;

namespace Intel.LogAnalyzer.BuiltInSQLFunctions_Temp
{
    public class ToLA2Date : ICustomSQLFunction
    {
        /// &lt;summary&gt;
        /// Test harness
        /// &lt;/summary&gt;
        [STAThread]
        private static void Main()
        {
            new ToLA2Date().Test(@"To_LA2Date(DateTime, 'yyyy ww.w')");
        }

        private enum FunctionName
        {
            To_LA2Date,
            To_LA2DateString
        }

        private class WWFilterInput
        {
            public string Query;
            public FunctionName Function;
            public string DateField;
            public string FormatFilter;
            public Match Match;
        }

        private WWFilterInput _input = null;

        private const string CHECK_PATTERN =
            @"(?&lt;=(\s+|\())(?&lt;FUNCTION&gt;(To_LA2Date|To_LA2DateString))\s*\(";

        private const string PATTERN = CHECK_PATTERN + @"\s*"
                + @"(?&lt;DateField&gt;[^,]+)\s*,\s*'(?&lt;FormatFilter&gt;[^']+)'\s*\)(?=(\s*|\)))";

        private const string INPUT_FORMAT_MESSAGE =
            @"Expected: ${FUNCTION}( &lt;DATE-FIELD&gt; , ""&lt;FORMAT-FILTER&gt;"")";

        public string LogParserType { get; set; }

        public bool IsCustomSQLFunction(string query)
        {
            return IsWWFunction(query, out _input);
        }

        private bool IsWWFunction(string query, out WWFilterInput input)
        {
            Match match = Regex.Match(query, PATTERN,
                RegexOptions.Singleline | RegexOptions.IgnoreCase);

            if (match.Success)
            {
                input = new WWFilterInput();

                input.Query = query;
                input.Function = UtilityMethods.ConvertToEnum&lt;FunctionName&gt;(match.Groups["FUNCTION"].Value);
                input.DateField = GetMatchValue(match, "DateField");
                input.FormatFilter = GetMatchValue(match, "FormatFilter");
                input.Match = match;

                return true;
            }
            else
            {
                match = Regex.Match(query, CHECK_PATTERN,
                    RegexOptions.Singleline | RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    FunctionName function = UtilityMethods.ConvertToEnum&lt;FunctionName&gt;(match.Groups["FUNCTION"].Value);
                    string message = INPUT_FORMAT_MESSAGE.Replace("${FUNCTION}", function.ToString());
                    throw new Exception(message);
                }
                input = null;
                return false;
            }
        }

        public string Execute()
        {
            string modifiedQuery = string.Empty;

            while (_input != null)
            {
                modifiedQuery = _input.Query;
                string output = string.Empty;

                switch (_input.Function)
                {
                    case FunctionName.To_LA2Date:
                    case FunctionName.To_LA2DateString:
                        output = GetStringFormat(_input.DateField, _input.FormatFilter);
                        break;
                }

                Match match = _input.Match;
                modifiedQuery = modifiedQuery.Substring(0, match.Index)
                    + output + modifiedQuery.Substring(match.Index + match.Length);

                IsWWFunction(modifiedQuery, out _input); // see if there is any other occurence of this function in the query
            }

            return modifiedQuery;
        }

        private static string GetStringFormat(string dateField, string format)
        {
            string newFormat = string.Empty;

            for (int i = 0; i &lt; format.Length; i++)
            {
                newFormat += @"\" + format[i];
            }

            string newDateField = dateField;
            string formatString = "yyyy/MM/dd HH:mm:ss.ll";

            if (format.ContainsEx("ww") &amp;&amp; !format.IsMatch("*H*|*h*|*m*|*s*|*f*"))
            {
                formatString = "yyyy/MM/dd";
                if (!format.IsMatch("*ww.w*|*d*")) // just ww
                {
                    // add a day and quantize by a week as Intel WW format is off by 1 day (Sunday is part of next WW with .0)
                    newDateField = "quantize(add(" + dateField + ", TIMESTAMP('2', 'd')), 604800)";
                }
            }

            return "to_string(" + newDateField + @", '" + newFormat + "{::}" + formatString + "')";
        }

        private string GetMatchValue(Match match, string groupName)
        {
            string value = match.Groups[groupName].Value.Trim(); ;
            if (value.Length == 0)
            {
                throw new ArgumentException("To_WorkWeek: Parameter [" + groupName + "] cannot be empty.");
            }
            return value;
        }

    }
}
</CustomSQLFunctionScripts>
  <PivotGroupingSettings PivotColumn="">
    <SortyByColumn>Count</SortyByColumn>
  </PivotGroupingSettings>
  <QuerySQL><![CDATA[
--[FileName:"T:\Dashboard\Jobs\PCAM\24-hr\Winclient Reboot_Running Number Completed.lasx"]------
----------<VARIABLES>------------
var FILEFILTER = "@{DASHBOARD_PERSIST_DATA}\PCAM\Output\1_NTSC_Summary_and_Timeline_DataPull.csv"
var FILEFILTER2 = "@{DASHBOARD_PERSIST_DATA}\PCAM\Output\01_SCDOTNET_Summary_and_Timeline_DataPull.csv"
var TIMEFILTER = "All"
var NODEFILTER = ""
var DOMAIN = ""
---[NTSC_CSV]---
BEGIN NTSC_CSV
	---Begin Main Query---
	Using CSV with
	SELECT
		NodeName,
		Date
	USING
		to_timestamp(EXTRACT_TOKEN( WCReboot, 0, ';'),'MM/dd/yy hh:mm:ss') as Date
	FROM
		${FILEFILTER}
	WHERE
		WCReboot is not null
		AND WCReboot like '%WCPM'
	ORDER BY
		Date desc
END NTSC_CSV
---[SCNET_CSV]---
BEGIN SCNET_CSV
	---Begin Main Query---
	Using CSV with
	SELECT
		NodeName,
		Date
	USING
		to_timestamp(extract_prefix(WCReboot,1,'-'),'yyyy/MM/dd-hh:mm:ss') as Date
	FROM
		${FILEFILTER2}
	WHERE
		WCReboot is not null
		AND WCReboot like '%WCPM'
	ORDER BY
		Date desc
END SCNET_CSV
UseMethod MergeTables with -- **Merge content of two tables by doing an outer join on the column schema (no join done here)**
	InputFile1 = "%{ntsc_csv}" -- Input CSV File #1 containing table data [String]
	InputFile2 = "%{scnet_csv}" -- Input CSV File #2 containing table data [String]
	AutoDetectColumnTypes = false -- Auto-detect column types before merging [Boolean]
---[POST]---
BEGIN POST
	---Begin Main Query---
	Using CSV with
	SELECT
		Count(*) as Total,
		SUB(TO_LOCALTIME(SYSTEM_TIMESTAMP()), TIMESTAMP('0000-01-02', 'yyyy-MM-dd')) as Date
	USING
		SUB(to_date(TO_LOCALTIME(SYSTEM_TIMESTAMP())), TIMESTAMP('0000-01-02', 'yyyy-MM-dd')) as CurrentLocalTimeTmp,
		to_la2date(CurrentLocalTimeTmp, 'yyyy ww.w') as CurrentLocalTime,
		to_la2date(Date, 'yyyy ww.w') as Timestamp
	FROM
		%{OUTPUT}
	WHERE
		Timestamp = CurrentLocalTime
	GROUP BY
		Timestamp
END POST
]]></QuerySQL>
</QueryConfig>