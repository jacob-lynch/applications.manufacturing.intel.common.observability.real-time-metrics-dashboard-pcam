<QueryConfig AutoExecuteQueryOnLoad="false" PreventSQLBeautification="false">
  <ChangeLog>Changed by GER\mfg_hgurarie on 6/6/2016 4:15:49 PM from F28PAP216N1.F28PROD.MFG.INTEL.COM using LogAnalyzer2 v2.9.51126.1153</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/30/2014 5:06:59 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40923.2310</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/30/2014 4:54:17 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40923.2310</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/30/2014 4:50:48 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40923.2310</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/30/2014 4:50:38 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40923.2310</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/30/2014 4:42:07 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40923.2310</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/9/2014 9:53:04 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/4/2014 1:03:29 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/4/2014 12:46:15 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/3/2014 3:59:40 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/3/2014 3:57:17 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/3/2014 3:56:06 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 9/3/2014 3:55:25 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/19/2014 10:02:08 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 2:34:35 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 10:37:30 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 10:06:56 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:59:49 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:56:25 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:55:41 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:44:54 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:44:43 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:42:32 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/14/2014 9:34:13 AM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_dmdavies on 8/13/2014 4:42:21 PM from RF3PTS216.RF3PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40806.2215</ChangeLog>
  <QueryAttributes>
    <OutputDateFormat>MM/dd/yyyy</OutputDateFormat>
    <AlwaysReplaceDomainWithLocal>false</AlwaysReplaceDomainWithLocal>
  </QueryAttributes>
  <PostQuerySQL>select * from %{OUTPUT}</PostQuerySQL>
  <TableLayoutConfig>
    <BoundColumnList>ID,MCCB Description,CEID,ChangeDate,PFIContact,OSAChange</BoundColumnList>
  </TableLayoutConfig>
  <TabOrder>C0</TabOrder>
  <MainPivotConfig>
    <ColumnX FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnY FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnData FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <CustomPalette />
    <TableData />
  </MainPivotConfig>
  <AutoPivotConfig OutputDateFormat="yyyy ww.w hh tt" />
  <MailConfig>
    <PostProcessingSQL Enable="false" />
    <EmailCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
      <Script />
    </EmailCondition>
    <PostProcessingCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </PostProcessingCondition>
    <CopyCondition Enable="false" ThresholdRowCount="0">
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </CopyCondition>
    <SMTPServer>smtp.intel.com</SMTPServer>
    <From>LogAnalyzer2@intel.com</From>
    <ReplyTo>todd.c.alford@intel.com</ReplyTo>
    <To />
    <Subject>[${DOMAIN}] Web_ntsc_uicontrol</Subject>
    <Body />
    <OnlyProcessIfOutputChangedFromPreviousRun>false</OnlyProcessIfOutputChangedFromPreviousRun>
    <MailAttachments FileNamingFormat="${SETTINGS}" Excel="false" CSV="false" LAS="false" LAD="false" Exceptions="false" StatusLogs="false" PivotChart="false" ZipAttachments="false" DoNotSendAttachmentsWithEmail="false" />
    <IncludeSQLQueryInBody>false</IncludeSQLQueryInBody>
    <TableInBody Enable="false">
      <SQL />
    </TableInBody>
    <CopyOutputToDirectory>false</CopyOutputToDirectory>
    <OutputDirectory />
    <IncludeAutoPivotSummary>false</IncludeAutoPivotSummary>
    <IgnoreExceptions>false</IgnoreExceptions>
    <OnlyCopyOutputIfEmailConditionIsMet>false</OnlyCopyOutputIfEmailConditionIsMet>
  </MailConfig>
  <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ID" type="xs:int" minOccurs="0" />
              <xs:element name="MCCB" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:int" minOccurs="0" />
              <xs:element name="OSA" type="xs:string" minOccurs="0" />
              <xs:element name="F24" type="xs:string" minOccurs="0" />
              <xs:element name="F28" type="xs:string" minOccurs="0" />
              <xs:element name="Name" type="xs:string" minOccurs="0" />
              <xs:element name="CEID" type="xs:string" minOccurs="0" />
              <xs:element name="Transfer_x0020_Date" type="xs:dateTime" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
  <TableData />
  <LastRunAbsoluteDateFilter />
  <CustomSQLFunctionScripts>using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using Intel.LogAnalyzer.Common;
using Intel.LogAnalyzer.Utility;

namespace Intel.LogAnalyzer.BuiltInSQLFunctions_Temp
{
    public class ToLA2Date : ICustomSQLFunction
    {
        /// &lt;summary&gt;
        /// Test harness
        /// &lt;/summary&gt;
        [STAThread]
        private static void Main()
        {
            new ToLA2Date().Test(@"To_LA2Date(DateTime, 'yyyy ww.w')");
        }

        private enum FunctionName
        {
            To_LA2Date,
            To_LA2DateString
        }

        private class WWFilterInput
        {
            public string Query;
            public FunctionName Function;
            public string DateField;
            public string FormatFilter;
            public Match Match;
        }

        private WWFilterInput _input = null;

        private const string CHECK_PATTERN =
            @"(?&lt;=(\s+|\())(?&lt;FUNCTION&gt;(To_LA2Date|To_LA2DateString))\s*\(";

        private const string PATTERN = CHECK_PATTERN + @"\s*"
                + @"(?&lt;DateField&gt;[^,]+)\s*,\s*'(?&lt;FormatFilter&gt;[^']+)'\s*\)(?=(\s*|\)))";

        private const string INPUT_FORMAT_MESSAGE =
            @"Expected: ${FUNCTION}( &lt;DATE-FIELD&gt; , ""&lt;FORMAT-FILTER&gt;"")";

        public string LogParserType { get; set; }

        public bool IsCustomSQLFunction(string query)
        {
            return IsWWFunction(query, out _input);
        }

        private bool IsWWFunction(string query, out WWFilterInput input)
        {
            Match match = Regex.Match(query, PATTERN,
                RegexOptions.Singleline | RegexOptions.IgnoreCase);

            if (match.Success)
            {
                input = new WWFilterInput();

                input.Query = query;
                input.Function = UtilityMethods.ConvertToEnum&lt;FunctionName&gt;(match.Groups["FUNCTION"].Value);
                input.DateField = GetMatchValue(match, "DateField");
                input.FormatFilter = GetMatchValue(match, "FormatFilter");
                input.Match = match;

                return true;
            }
            else
            {
                match = Regex.Match(query, CHECK_PATTERN,
                    RegexOptions.Singleline | RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    FunctionName function = UtilityMethods.ConvertToEnum&lt;FunctionName&gt;(match.Groups["FUNCTION"].Value);
                    string message = INPUT_FORMAT_MESSAGE.Replace("${FUNCTION}", function.ToString());
                    throw new Exception(message);
                }
                input = null;
                return false;
            }
        }

        public string Execute()
        {
            string modifiedQuery = string.Empty;

            while (_input != null)
            {
                modifiedQuery = _input.Query;
                string output = string.Empty;

                switch (_input.Function)
                {
                    case FunctionName.To_LA2Date:
                    case FunctionName.To_LA2DateString:
                        output = GetStringFormat(_input.DateField, _input.FormatFilter);
                        break;
                }

                Match match = _input.Match;
                modifiedQuery = modifiedQuery.Substring(0, match.Index)
                    + output + modifiedQuery.Substring(match.Index + match.Length);

                IsWWFunction(modifiedQuery, out _input); // see if there is any other occurence of this function in the query
            }

            return modifiedQuery;
        }

        private static string GetStringFormat(string dateField, string format)
        {
            string newFormat = string.Empty;

            for (int i = 0; i &lt; format.Length; i++)
            {
                newFormat += @"\" + format[i];
            }

            string newDateField = dateField;
            string formatString = "yyyy/MM/dd HH:mm:ss.ll";

            if (format.ContainsEx("ww") &amp;&amp; !format.IsMatch("*H*|*h*|*m*|*s*|*f*"))
            {
                formatString = "yyyy/MM/dd";
                if (!format.IsMatch("*ww.w*|*d*")) // just ww
                {
                    // add a day and quantize by a week as Intel WW format is off by 1 day (Sunday is part of next WW with .0)
                    newDateField = "quantize(add(" + dateField + ", TIMESTAMP('2', 'd')), 604800)";
                }
            }

            return "to_string(" + newDateField + @", '" + newFormat + "{::}" + formatString + "')";
        }

        private string GetMatchValue(Match match, string groupName)
        {
            string value = match.Groups[groupName].Value.Trim(); ;
            if (value.Length == 0)
            {
                throw new ArgumentException("To_WorkWeek: Parameter [" + groupName + "] cannot be empty.");
            }
            return value;
        }

    }
}
</CustomSQLFunctionScripts>
  <PivotGroupingSettings PivotColumn="">
    <SortyByColumn>Count</SortyByColumn>
  </PivotGroupingSettings>
  <QuerySQL><![CDATA[
--[FileName:"R:\Dashboard\Web\PCAM\LA2 Scripts\Web_DMFSGAreaMCCB.lasx"]------
----------<VARIABLES>------------
var FILEFILTER = "@{DASHBOARD_LOCAL_WEB}\PCAM\Output\ALL_MCCB.csv"
var MCCBFILTER = "Done, NA, Cancel, Divergence"
var 1274MCCB = "http://autosp.rf3prod.mfg.intel.com/sites/AutoXfer/PCAM/127475%20PCAM%20MCCB/"
var 1272MCCB = "http://autosp.rf3prod.mfg.intel.com/sites/AutoXfer/PCAM/127273%20PCAM%20MCCB/"
var 1270MCCB = "http://autosp.rf3prod.mfg.intel.com/sites/AutoXfer/PCAM/127071%20PCAM%20MCCB/"
var 1270EOLMCCB = "http://autosp.rf3prod.mfg.intel.com/sites/AutoXfer/PCAM/300mm%20PCAM%20MCCB/"
var SUPPORTSITEVIEW = "@{SUPPORTSITEVIEW}"
var AFOMCCBSTATUS = "@{AFOMCCBSTATUS}"
var D1CMCCBSTATUS = "@{D1CMCCBSTATUS}"
var D1DMCCBSTATUS = "@{D1DMCCBSTATUS}"
var F11XMCCBSTATUS = "@{F11xMCCBSTATUS}"
var F24MCCBSTATUS = "@{F24MCCBSTATUS}"
var F28MCCBSTATUS = "@{F28MCCBSTATUS}"
var OSAMCCBSTATUS = "@{OSAMCCBSTATUS}"
var AREA = "@{DEFMETFSGAREA}"
---[MAIN_CSV]---
BEGIN MAIN_CSV
	---Begin Main Query---
	Using CSV with
	SELECT
		Process,
		Author,
		ChangeType as [Change Type],
		ID,
		site,
		Name,
		CEID,
		TxfrDate as [Transfer Date],
		AFOChange as [AFOtmp],
		D1CChange as [D1Ctmp],
		[D1Dtmp],
		F11xChange as [F11xtmp],
		[F24tmp],
		F28Change as [F28tmp],
		OSAChange as [OSAtmp],
		MCCB,
		AFOCompletedBy,
		D1CCompletedBy,
		D1DCompletedBy,
		F11xCompletedBy,
		OSACompletedBy,
		F28CompletedBy,
		F24CompletedBy
	USING
		CASE MCCBSite when '1272' then '1272' when '1274' then '1274' else '1270' end as Process,
		CASE Process when '1270' then NULL else D1DChange end as [D1Dtmp],
		CASE Process when '1270' then NULL when '1274' then NULL else F24Change end as [F24tmp],
		CASE MCCBSite when 'Old' then strcat('${1270EOLMCCB}', to_string(Name)) when 'New' then strcat('${1270MCCB}', to_string(Name)) when '1272' then strcat('${1272MCCB}', to_string(Name)) when '1274' then strcat('${1274MCCB}', to_string(Name)) else NULL end as MCCB
	FROM
		'${FILEFILTER}'
	WHERE
		(isinlist(Area, '${Area}')) AND (ChangeType like 'Pending'
		OR (ChangeType like 'Final' AND (NOT IsInList(AFOtmp, '${MCCBFILTER}') AND AFOtmp IS NOT NULL)
		OR (NOT IsInList(D1Ctmp, '${MCCBFILTER}') AND D1Ctmp IS NOT NULL)
		OR (NOT IsInList([D1Dtmp], '${MCCBFILTER}') AND [D1Dtmp] IS NOT NULL)
		OR (NOT IsInList(F11xtmp, '${MCCBFILTER}') AND F11xtmp IS NOT NULL)
		OR (NOT IsInList(F28tmp, '${MCCBFILTER}') AND F28tmp IS NOT NULL)
		OR (NOT IsInList(OSAtmp, '${MCCBFILTER}') AND OSAtmp IS NOT NULL)
		OR (NOT IsInList([F24tmp], '${MCCBFILTER}') AND [F24tmp] IS NOT NULL)))
	ORDER BY
		Process, ID desc
END MAIN_CSV
---Begin Main Query---
Using CSV with
SELECT
	ID,
	MCCB,
	Process,
	${SUPPORTSITEVIEW},
	Name,
	CEID,
	[Transfer Date]
USING
	CASE AFOCompletedBy when null then AFOtmp else strcat(strcat(strcat(AFOtmp, ' ('), AFOCompletedBy), ')') end as AFOTmp2,
	CASE D1CCompletedBy when null then D1Ctmp else strcat(strcat(strcat(D1Ctmp, ' ('), D1CCompletedBy), ')') end as D1CTmp2,
	CASE D1DCompletedBy when null then D1Dtmp else strcat(strcat(strcat(D1Dtmp, ' ('), D1DCompletedBy), ')') end as D1DTmp2,
	CASE F11xCompletedBy when null then F11xtmp else strcat(strcat(strcat(F11xtmp, ' ('), F11xCompletedBy), ')') end as F11xTmp2,
	CASE F24CompletedBy when null then F24tmp else strcat(strcat(strcat(F24tmp, ' ('), F24CompletedBy), ')') end as F24Tmp2,
	CASE F28CompletedBy when null then F28tmp else strcat(strcat(strcat(F28tmp, ' ('), F28CompletedBy), ')') end as F28Tmp2,
	CASE OSACompletedBy when null then OSAtmp else strcat(strcat(strcat(OSAtmp, ' ('), OSACompletedBy), ')') end as OSATmp2,
	CASE [Change Type] when 'Pending' then CASE Site when 'AFO' then strcat(strcat('Pending (', Author), ')') else AFOTmp2 end else AFOTmp2 end as AFOTmp3,
	CASE [Change Type] when 'Pending' then CASE Site when 'D1C' then strcat(strcat('Pending (', Author), ')') else D1CTmp2 end else D1CTmp2 end as D1CTmp3,
	CASE [Change Type] when 'Pending' then CASE Site when 'D1D' then strcat(strcat('Pending (', Author), ')') else D1DTmp2 end else D1DTmp2 end as D1DTmp3,
	CASE [Change Type] when 'Pending' then CASE Site when 'F11x' then strcat(strcat('Pending (', Author), ')') else F11xTmp2 end else F11xTmp2 end as F11xTmp3,
	CASE [Change Type] when 'Pending' then CASE Site when 'F24' then strcat(strcat('Pending (', Author), ')') else F24Tmp2 end else F24Tmp2 end as F24Tmp3,
	CASE [Change Type] when 'Pending' then CASE Site when 'F28' then strcat(strcat('Pending (', Author), ')') else F28Tmp2 end else F28Tmp2 end as F28Tmp3,
	CASE [Change Type] when 'Pending' then CASE Site when 'OSA' then strcat(strcat('Pending (', Author), ')') else OSATmp2 end else OSATmp2 end as OSATmp3,
	CASE AFOTmp3 when ' (NA)' then null when 'NA (NA)' then null else AFOTmp3 end as AFO,
	CASE D1CTmp3 when ' (NA)' then null when 'NA (NA)' then null else D1CTmp3 end as D1C,
	CASE D1DTmp3 when ' (NA)' then null when 'NA (NA)' then null else D1DTmp3 end as D1D,
	CASE F11xTmp3 when ' (NA)' then null when 'NA (NA)' then null else F11xTmp3 end as F11x,
	CASE F24Tmp3 when ' (NA)' then null when 'NA (NA)' then null else F24Tmp3 end as F24,
	CASE F28Tmp3 when ' (NA)' then null when 'NA (NA)' then null else F28Tmp3 end as F28,
	CASE OSATmp3 when ' (NA)' then null when 'NA (NA)' then null else OSATmp3 end as OSA
FROM
	%{MAIN_CSV}
WHERE
	IsInList(AFO, '${AFOMCCBSTATUS}')
	OR IsInList(D1C, '${D1CMCCBSTATUS}')
	OR IsInList(D1D, '${D1DMCCBSTATUS}')
	OR IsInList(F11x, '${F11xMCCBSTATUS}')
	OR IsInList(F24, '${F24MCCBSTATUS}')
	OR IsInList(F28, '${F28MCCBSTATUS}')
	OR IsInList(OSA, '${OSAMCCBSTATUS}')

]]></QuerySQL>
</QueryConfig>