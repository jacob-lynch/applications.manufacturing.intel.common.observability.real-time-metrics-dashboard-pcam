<QueryConfig AutoExecuteQueryOnLoad="false">
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/24/2015 12:16:42 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/24/2015 12:15:13 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/24/2015 11:19:38 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 6/24/2015 11:14:10 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 1:46:50 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 1:39:24 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 11:20:55 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 10:23:19 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 10:22:56 AM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 10:20:19 AM from F32PTS215.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 10:17:21 AM from F32PTS215.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 5/22/2015 10:12:28 AM from F32PTS215.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:45:12 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:30:14 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:26:34 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:25:44 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:22:21 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:03:13 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 11:03:04 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 10:50:50 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 10:50:39 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 10:36:50 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 10:36:39 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 10:26:05 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <ChangeLog>Changed by AMR\mfg_tcalford on 3/4/2015 10:25:15 PM from F32PAP216N3.F32PROD.MFG.INTEL.COM using LogAnalyzer2 v2.8.40713.1943</ChangeLog>
  <UNIQECredentials UserId="uber" Site="rf3sap110-alias.rf3stg.mfgint.intel.com" DataSource="D1D_STAG_LogAnalyzer" SaveCredentials="true" UseUNIQECredentialsOnStartUp="false" QueryTimeOutInSeconds="-1">
    <Password />
    <Name />
  </UNIQECredentials>
  <QueryAttributes>
    <OutputDateFormat>MM/dd/yyyy hh:mmtt</OutputDateFormat>
    <SuppressAllExceptions>true</SuppressAllExceptions>
    <AlwaysReplaceDomainWithLocal>false</AlwaysReplaceDomainWithLocal>
  </QueryAttributes>
  <PostQuerySQL>select * from %{OUTPUT}</PostQuerySQL>
  <TableLayoutConfig>
    <BoundColumnList>created_on,calendar_stc,resolved_at,closed_at,incident_state,requestor,vip,is_manager,badge_type,requestor_location,assigned_group,assigned_to_person,opened_by,resolved_by,requestor_manager,pccb_wp_number,change_type,upon_approval,location,expected_start,reopen_count,close_notes,u_modeling_project_status,impact,correlation_id,urgency,sys_domain,priority,description,delivery_plan,u_mart,sys_mod_count,follow_up,original_closed_at,sla_due,delivery_task,sys_updated_on,parent,number,work_end,u_mdccb_package,closed_by,work_start,variables,category,business_duration,activity_due,u_process,correlation_display,company,u_functional_area,due_date,active,knowledge,made_sla,parent_incident,u_pccb_wp_link,state,sys_created_on,user_input,approval_set,reassignment_count,rfc,child_incidents,opened_at,order,short_description,sys_updated_by,notify,upon_reject,approval_history,problem_id,calendar_duration,close_code,approval,caused_by,severity,u_tool,sys_created_by,business_stc,cmdb_ci,wf_activity,subcategory,rejection_goto,sys_class_name,contact_type,escalation,time_worked,comments,group_list,work_notes_list,comments_and_work_notes,work_notes</BoundColumnList>
  </TableLayoutConfig>
  <TabOrder>C0,G0,G1,G2,G3,G4,G5</TabOrder>
  <MainPivotConfig>
    <ColumnX FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnY FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <ColumnData FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
    <CustomPalette />
    <TableData />
  </MainPivotConfig>
  <OutputDataGridConfig Name="Exception - Unassigned">
    <Caption>Exception - Unassigned</Caption>
    <SQL>---Begin Main Query---
SELECT
	NumberURL,
	DaysUnassigned,
	Location,
	u_functional_area as Area,
	u_process as Process,
	created_on as CreatedOn,
	EstimatedDelivery as [Estimated Delivery],
	Assigned_To_Person as AssignedTo,
	short_description as Title,
	requestor as Requestor,
	change_type as ChangeType
USING
	strcat('&lt;a href="', Link) as temp,
	strcat(temp, '"&gt;') as temp2,
	strcat(temp2, to_string(Number)) as temp3,
	strcat(temp3, '&lt;/a&gt;') as NumberURL,
	to_int(sub(system_date(),Created_On)) as time,
	div(time,86400) as Daystmp,
	case Daystmp when -1 then 0 else Daystmp end as DaysUnassigned
FROM
	%{OUTPUT}
WHERE
	AssignedTo is null and state not like '%Complete'
ORDER BY
	CreatedOn
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>ResourcePending</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NumberURL" type="xs:string" minOccurs="0" />
              <xs:element name="DaysUnassigned" type="xs:int" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="Area" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:string" minOccurs="0" />
              <xs:element name="CreatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Estimated_x0020_Delivery" type="xs:dateTime" minOccurs="0" />
              <xs:element name="AssignedTo" type="xs:string" minOccurs="0" />
              <xs:element name="Title" type="xs:string" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="ChangeType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Exception - ECD">
    <Caption>Exception - ECD</Caption>
    <SQL>---Begin Main Query---
SELECT
	NumberURL,
	DaysWithNoECD,
	Location,
	u_functional_area as Area,
	u_process as Process,
	created_on as CreatedOn,
	EstimatedDelivery as [Estimated Delivery],
	Assigned_To_Person as AssignedTo,
	short_description as Title,
	requestor as Requestor,
	change_type as ChangeType
USING
	strcat('&lt;a href="', Link) as temp,
	strcat(temp, '"&gt;') as temp2,
	strcat(temp2, to_string(Number)) as temp3,
	strcat(temp3, '&lt;/a&gt;') as NumberURL,
	to_int(sub(system_date(),Created_On)) as time,
	div(time,86400) as Daystmp,
	case Daystmp when -1 then 0 else Daystmp end as DaysWithNoECD
FROM
	%{OUTPUT}
WHERE
	EstimatedDelivery is null and AssignedTo is not null
ORDER BY
	CreatedOn
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>ResourcePending</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NumberURL" type="xs:string" minOccurs="0" />
              <xs:element name="DaysWithNoECD" type="xs:int" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="Area" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:string" minOccurs="0" />
              <xs:element name="CreatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Estimated_x0020_Delivery" type="xs:string" minOccurs="0" />
              <xs:element name="AssignedTo" type="xs:string" minOccurs="0" />
              <xs:element name="Title" type="xs:string" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="ChangeType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Exception - Beyond ECD">
    <Caption>Exception - Beyond ECD</Caption>
    <SQL>---Begin Main Query---
SELECT
	NumberURL,
	DaysBeyondECD,
	Location,
	u_functional_area as Area,
	u_process as Process,
	created_on as CreatedOn,
	EstimatedDelivery as [Estimated Delivery],
	Assigned_To_Person as AssignedTo,
	short_description as Title,
	requestor as Requestor,
	change_type as ChangeType
USING
	strcat('&lt;a href="', Link) as temp,
	strcat(temp, '"&gt;') as temp2,
	strcat(temp2, to_string(Number)) as temp3,
	strcat(temp3, '&lt;/a&gt;') as NumberURL,
	to_int(sub(system_date(),EstimatedDelivery)) as time,
	div(time,86400) as Daystmp,
	case Daystmp when -1 then 0 else Daystmp end as DaysBeyondECD
FROM
	%{OUTPUT}
WHERE
	EstimatedDelivery is not null and state not like 'AwaitingInfo' and DaysBeyondECD &gt; 0
ORDER BY
	DaysBeyondECD desc
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>ResourcePending</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NumberURL" type="xs:string" minOccurs="0" />
              <xs:element name="DaysBeyondECD" type="xs:int" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="Area" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:string" minOccurs="0" />
              <xs:element name="CreatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Estimated_x0020_Delivery" type="xs:dateTime" minOccurs="0" />
              <xs:element name="AssignedTo" type="xs:string" minOccurs="0" />
              <xs:element name="Title" type="xs:string" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="ChangeType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Exception - AUI">
    <Caption>Exception - AUI</Caption>
    <SQL>---Begin Main Query---
SELECT
	NumberURL,
	DaysWaitingUser,
	State,
	Location,
	sys_updated_on as UpdatedOn,
	requestor as Requestor,
	short_description as Title,
	u_functional_area as Area,
	u_process as Process,
	Assigned_To_Person as AssignedTo,
	change_type as ChangeType,
	LastUpdateBy,
	LogUpdate,
	LogType
USING
	strcat('&lt;a href="', Link) as temp,
	strcat(temp, '"&gt;') as temp2,
	strcat(temp2, to_string(Number)) as temp3,
	strcat(temp3, '&lt;/a&gt;') as NumberURL,
	to_int(sub(system_date(),sys_updated_on)) as time,
	div(time,86400) as Daystmp,
	case Daystmp when -1 then 0 else Daystmp end as DaysWaitingUser
FROM
	%{OUTPUT}
WHERE
	state = 'AwaitingInfo' and DaysWaitingUser &gt; 0
ORDER BY
	DaysWaitingUser desc
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>NumberURL,DaysWaitingUser,State,Location,UpdatedOn,Requestor,Title,Area,Process,AssignedTo,ChangeType,LastUpdateBy,LogUpdate,LogType</BoundColumnList>
      <AllColumns>NumberURL</AllColumns>
      <AllColumns>DaysWaitingUser</AllColumns>
      <AllColumns>State</AllColumns>
      <AllColumns>Location</AllColumns>
      <AllColumns>UpdatedOn</AllColumns>
      <AllColumns>Title</AllColumns>
      <AllColumns>Area</AllColumns>
      <AllColumns>Process</AllColumns>
      <AllColumns>ChangeType</AllColumns>
      <AllColumns>AssignedTo</AllColumns>
      <AllColumns>Requestor</AllColumns>
      <AllColumns>LastUpdateBy</AllColumns>
      <AllColumns>LogUpdate</AllColumns>
      <AllColumns>LogType</AllColumns>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NumberURL" type="xs:string" minOccurs="0" />
              <xs:element name="DaysWaitingUser" type="xs:int" minOccurs="0" />
              <xs:element name="State" type="xs:string" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="UpdatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="Title" type="xs:string" minOccurs="0" />
              <xs:element name="Area" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:string" minOccurs="0" />
              <xs:element name="AssignedTo" type="xs:string" minOccurs="0" />
              <xs:element name="ChangeType" type="xs:string" minOccurs="0" />
              <xs:element name="LastUpdateBy" type="xs:string" minOccurs="0" />
              <xs:element name="LogUpdate" type="xs:dateTime" minOccurs="0" />
              <xs:element name="LogType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Exception - Stalled">
    <Caption>Exception - Stalled</Caption>
    <SQL>---Begin Main Query---
SELECT
	NumberURL,
	DaysSinceUpdate,
	State,
	Location,
	sys_updated_on as UpdatedOn,
	Assigned_To_Person as AssignedTo,
	short_description as Title,
	u_functional_area as Area,
	u_process as Process,
	requestor as Requestor,
	change_type as ChangeType,
	LastUpdateBy,
	LogUpdate,
	LogType
USING
	strcat('&lt;a href="', Link) as temp,
	strcat(temp, '"&gt;') as temp2,
	strcat(temp2, to_string(Number)) as temp3,
	strcat(temp3, '&lt;/a&gt;') as NumberURL,
	to_int(sub(system_date(),sys_updated_on)) as time,
	div(time,86400) as Daystmp,
	case Daystmp when -1 then 0 else Daystmp end as DaysSinceUpdate
FROM
	%{OUTPUT}
WHERE
	state &lt;&gt; 'AwaitingInfo' and state not like '%Complete%' and DaysSinceUpdate &gt; 14
ORDER BY
	DaysSinceUpdate desc
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>ResourcePending</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NumberURL" type="xs:string" minOccurs="0" />
              <xs:element name="DaysSinceUpdate" type="xs:int" minOccurs="0" />
              <xs:element name="State" type="xs:string" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="UpdatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="AssignedTo" type="xs:string" minOccurs="0" />
              <xs:element name="Title" type="xs:string" minOccurs="0" />
              <xs:element name="Area" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:string" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="ChangeType" type="xs:string" minOccurs="0" />
              <xs:element name="LastUpdateBy" type="xs:string" minOccurs="0" />
              <xs:element name="LogUpdate" type="xs:dateTime" minOccurs="0" />
              <xs:element name="LogType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <OutputDataGridConfig Name="Exception - Long ECD">
    <Caption>Exception - Long ECD</Caption>
    <SQL>---Begin Main Query---
SELECT
	NumberURL,
	DaysLengthofECD,
	Location,
	created_on as CreatedOn,
	EstimatedDelivery as [Estimated Delivery],
	Assigned_To_Person as AssignedTo,
	short_description as Title,
	u_functional_area as Area,
	u_process as Process,
	requestor as Requestor,
	change_type as ChangeType
USING
	strcat('&lt;a href="', Link) as temp,
	strcat(temp, '"&gt;') as temp2,
	strcat(temp2, to_string(Number)) as temp3,
	strcat(temp3, '&lt;/a&gt;') as NumberURL,
	to_int(sub(EstimatedDelivery,created_on)) as time,
	div(time,86400) as Daystmp,
	case Daystmp when -1 then 0 else Daystmp end as DaysLengthofECD
FROM
	%{OUTPUT}
WHERE
	EstimatedDelivery is not null and state not like '%Complete' and DaysLengthofECD &gt; 29
ORDER BY
	DaysLengthofECD desc
</SQL>
    <TableLayoutConfig>
      <BoundColumnList>ResourcePending</BoundColumnList>
    </TableLayoutConfig>
    <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NumberURL" type="xs:string" minOccurs="0" />
              <xs:element name="DaysLengthofECD" type="xs:int" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="CreatedOn" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Estimated_x0020_Delivery" type="xs:dateTime" minOccurs="0" />
              <xs:element name="AssignedTo" type="xs:string" minOccurs="0" />
              <xs:element name="Title" type="xs:string" minOccurs="0" />
              <xs:element name="Area" type="xs:string" minOccurs="0" />
              <xs:element name="Process" type="xs:string" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="ChangeType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
    <TableData />
  </OutputDataGridConfig>
  <AutoPivotConfig OutputDateFormat="yyyy ww.w hh tt" />
  <MailConfig>
    <PostProcessingSQL Enable="false">
      <SQL />
    </PostProcessingSQL>
    <EmailCondition Enable="false" Operator="&lt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
      <Script />
    </EmailCondition>
    <PostProcessingCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </PostProcessingCondition>
    <CopyCondition Enable="false" Operator="&gt;" ThresholdRowCount="0">
      <SQLQuery />
      <RunScriptBeforeEmailing>false</RunScriptBeforeEmailing>
    </CopyCondition>
    <SMTPServer>smtp.intel.com</SMTPServer>
    <From>LogAnalyzer2@intel.com</From>
    <ReplyTo>@{DASHBOARD_OWNER_ALERT_DIST}</ReplyTo>
    <To />
    <Subject>[${DOMAIN}] Barnum Metrics</Subject>
    <Body />
    <OnlyProcessIfOutputChangedFromPreviousRun>false</OnlyProcessIfOutputChangedFromPreviousRun>
    <MailAttachments FileNamingFormat="${SETTINGS}" Excel="false" CSV="false" LAS="false" LAD="false" Exceptions="false" StatusLogs="false" PivotChart="false" ZipAttachments="false" DoNotSendAttachmentsWithEmail="false" IncludeJobStatisticsHeader="false" IncludeQuerySettingsFileHeader="false" IncludeVariableDefinitionHeader="false" IncludeRowCountInSubject="false" />
    <IncludeSQLQueryInBody>false</IncludeSQLQueryInBody>
    <TableInBody Enable="false">
      <SQL />
    </TableInBody>
    <CopyOutputToDirectory>true</CopyOutputToDirectory>
    <OutputDirectory>@{DASHBOARD_WEB_SPOOL}\PCAM\Output</OutputDirectory>
    <IncludeAutoPivotSummary>false</IncludeAutoPivotSummary>
    <IncludeCustomPivotSummary>false</IncludeCustomPivotSummary>
    <IgnoreExceptions>true</IgnoreExceptions>
    <OnlyCopyOutputIfEmailConditionIsMet>false</OnlyCopyOutputIfEmailConditionIsMet>
    <PivotConfigs Enable="true" PivotColumn="Resource">
      <SortyByColumn>Count</SortyByColumn>
      <IncludeStatistics>true</IncludeStatistics>
      <IncludeChart>true</IncludeChart>
      <ChartConfig Enable="true">
        <ColumnX FieldName="Resource" FieldType="String" SortMode="Default" SortOrder="Ascending" SummaryType="Average" SortBySummaryInfo="true" SortBySummaryInfoFieldName="Count" />
        <ColumnY FieldName="" FieldType="" SortMode="Default" SortOrder="Ascending" SummaryType="Count" SortBySummaryInfo="false" />
        <ColumnData FieldName="Count" FieldType="Int32" SortMode="Default" SortOrder="Ascending" SummaryType="Average" SortBySummaryInfo="false" />
        <ColorPalette>Office</ColorPalette>
        <ReverseXAxis>true</ReverseXAxis>
        <CustomPalette />
        <TableData />
      </ChartConfig>
    </PivotConfigs>
  </MailConfig>
  <TableSchema><xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Results" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Results">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Number" type="xs:string" minOccurs="0" />
              <xs:element name="Link" type="xs:string" minOccurs="0" />
              <xs:element name="State" type="xs:string" minOccurs="0" />
              <xs:element name="u_Functional_Area" type="xs:string" minOccurs="0" />
              <xs:element name="Location" type="xs:string" minOccurs="0" />
              <xs:element name="u_Process" type="xs:string" minOccurs="0" />
              <xs:element name="Priority" type="xs:int" minOccurs="0" />
              <xs:element name="Barnum_Priority" type="xs:int" minOccurs="0" />
              <xs:element name="Assigned_to_Person" type="xs:string" minOccurs="0" />
              <xs:element name="Created_On" type="xs:dateTime" minOccurs="0" />
              <xs:element name="sys_Updated_on" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Due_Date" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Category" type="xs:string" minOccurs="0" />
              <xs:element name="Change_Type" type="xs:string" minOccurs="0" />
              <xs:element name="Short_Description" type="xs:string" minOccurs="0" />
              <xs:element name="Description" type="xs:string" minOccurs="0" />
              <xs:element name="Resolved_At" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Closed_At" type="xs:dateTime" minOccurs="0" />
              <xs:element name="Requestor" type="xs:string" minOccurs="0" />
              <xs:element name="ROI" type="xs:string" minOccurs="0" />
              <xs:element name="CEID" type="xs:string" minOccurs="0" />
              <xs:element name="EstimatedDelivery" type="xs:dateTime" minOccurs="0" />
              <xs:element name="LastUpdateBy" type="xs:string" minOccurs="0" />
              <xs:element name="LogUpdate" type="xs:dateTime" minOccurs="0" />
              <xs:element name="LogType" type="xs:string" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</TableSchema>
  <TableData />
  <LastRunAbsoluteDateFilter />
  <CustomSQLFunctionScripts>using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using Intel.LogAnalyzer.Common;
using Intel.LogAnalyzer.Utility;

namespace Intel.LogAnalyzer.BuiltInSQLFunctions_Temp
{
    public class ApplyTimeRangeFilter : ICustomSQLFunction
    {        
        /// &lt;summary&gt;
        /// Test harness
        /// &lt;/summary&gt;
        [STAThread]
        private static void Main()
        {
            new ApplyTimeRangeFilter().Test(@"ApplyTimeRangeFilter(DateTime, 'Last 1 day (prev mode)')");
        }

        private enum FunctionName
        {
            ApplyTimeRangeFilter,
            ApplyStartTimeFilter,
            ApplyEndTimeFilter,
            ApplyTimeRangeFilterSQL,
            ApplyTimeRangeFilterOracle,
            ApplyTimeRangeFilterDB2
        }

        private class TimeRangeFilterInput
        {
            public string Query;
            public FunctionName Function;
            public string DateField;
            public string DateFilter;
            public int TimeZoneOffsetInSeconds;
            public bool IsFieldAFunction;
            public Match Match;
        }

        private TimeRangeFilterInput _input = null;

        private const string CHECK_PATTERN =
            @"(?&lt;=(\s+|\())(?&lt;FUNCTION&gt;(ApplyTimeRangeFilter|ApplyTimeRangeFilterSQL|ApplyTimeRangeFilterOracle|ApplyTimeRangeFilterDB2|ApplyStartTimeFilter|ApplyEndTimeFilter))\s*\(";

        private const string PATTERN = CHECK_PATTERN + @"\s*"
            + @"(?&lt;DateField&gt;({[^}]+})|([^,]+))\s*,\s*'(?&lt;DateFilter&gt;[^']+)'"
            + @"(,\s*(?&lt;TimeZoneOffsetInSeconds&gt;[+-]{0,1}\d+)\s*){0,1}"
            + @"\s*\)(?=(\s*|\)))";

        private const string INPUT_FORMAT_MESSAGE =
            @"Expected: ${FUNCTION}( &lt;DATE-FIELD&gt;, '&lt;DATE-FILTER&gt;' [, &lt;TIME-ZONE-OFFSET-IN-SECONDS&gt;] )";

        public string LogParserType { get; set; }

        public bool IsCustomSQLFunction(string query)
        {
            return IsDateFilterFunction(query, out _input);
        }

        private bool IsDateFilterFunction(string query, out TimeRangeFilterInput input)
        {
            Match match = Regex.Match(query, PATTERN, 
                RegexOptions.Singleline | RegexOptions.IgnoreCase);

            if (match.Success)
            {
                input = new TimeRangeFilterInput();

                input.Query = query;
                input.Function = UtilityMethods.ConvertToEnum&lt;FunctionName&gt;(match.Groups["FUNCTION"].Value);
                input.DateField = GetMatchValue(match, "DateField", false).Trim();
                string tmp = GetMatchValue(match, "TimeZoneOffsetInSeconds", true).Trim();
                input.TimeZoneOffsetInSeconds = (tmp.Length == 0) ? 0 : Convert.ToInt32(tmp);

                if (input.DateField.StartsWith("{") &amp;&amp; input.DateField.EndsWith("}"))
                {
                    input.DateField = input.DateField.Substring(1, input.DateField.Length - 2);
                    input.IsFieldAFunction = true;
                }
                else
                {
                    input.IsFieldAFunction = false;
                }
                input.DateFilter = GetMatchValue(match, "DateFilter", false);
                input.Match = match;

                return true;
            }
            else
            {
                match = Regex.Match(query, CHECK_PATTERN,
                    RegexOptions.Singleline | RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    FunctionName function = UtilityMethods.ConvertToEnum&lt;FunctionName&gt;(match.Groups["FUNCTION"].Value);
                    string message = INPUT_FORMAT_MESSAGE.Replace("${FUNCTION}", function.ToString());
                    throw new Exception(message);
                }
                input = null;
                return false;
            }        
        }

        public string Execute()
        {
            bool containsRelativeDateFilter;
            return ReplaceFilters(out containsRelativeDateFilter);
        }

        public bool ContainsRelativeDateFilter()
        {
            bool containsRelativeDateFilter;
            ReplaceFilters(out containsRelativeDateFilter);
            return containsRelativeDateFilter;
        }

        private string ReplaceFilters(out bool containsRelativeDateFilter)
        {
            string modifiedQuery = string.Empty;
            containsRelativeDateFilter = false;

            while (_input != null)
            {
                modifiedQuery = _input.Query;
                string output = string.Empty;
                List&lt;string&gt; dateFilters = new List&lt;string&gt;(_input.DateFilter.Split(','));
                DateTime startDate, endDate;
              
                for (int i = 0; i &lt; dateFilters.Count; i++)
                {
                    string outCondition = string.Empty;

                    if (DateFilter.GetAbsoluteDateFilter(dateFilters[i]) == "All")
                    {
                        outCondition = "(1 = 1)"; // no time-filter needed
                    }
                    else
                    {
                        DateFilter.ParseFilter(dateFilters[i], out startDate, out endDate);
                        string dateFilter = dateFilters[i].Trim();
                        if (!DateFilter.IsFixedTimeFilter(dateFilter))
                        {
                            containsRelativeDateFilter = true;
                        }
                        if (_input.TimeZoneOffsetInSeconds != 0)
                        {
                            if (startDate &gt; DateTime.MinValue &amp;&amp; startDate &lt; DateTime.MaxValue)
                            {
                                startDate = startDate.Add(TimeSpan.FromSeconds(_input.TimeZoneOffsetInSeconds));
                            }
                            if (endDate &gt; DateTime.MinValue &amp;&amp; endDate &lt; DateTime.MaxValue)
                            {
                                endDate = endDate.Add(TimeSpan.FromSeconds(_input.TimeZoneOffsetInSeconds));
                            }
                            dateFilter = "From " + startDate + " to " + endDate;
                        }

                        switch (_input.Function)
                        {
                            case FunctionName.ApplyTimeRangeFilter:
                                outCondition = DateFilter.CreateSQLRangeFilter(_input.DateField, dateFilter);
                                break;

                            case FunctionName.ApplyStartTimeFilter:
                                outCondition = "(" + _input.DateField + " &gt; " + DateFilter.GetStartSQLTimeStamp(dateFilter) + ")";
                                break;

                            case FunctionName.ApplyEndTimeFilter:
                                outCondition = "(" + _input.DateField + " &lt; " + DateFilter.GetEndSQLTimeStamp(dateFilter) + ")";
                                break;

                            case FunctionName.ApplyTimeRangeFilterSQL:
                                outCondition = "(" + _input.DateField + " &gt;= '" + startDate.ToString("yyyy/MM/dd HH:mm:ss")
                                    + "' AND " + _input.DateField + " &lt; '" + endDate.ToString("yyyy/MM/dd HH:mm:ss") + "')";
                                break;

                            case FunctionName.ApplyTimeRangeFilterDB2:
                                outCondition = "(" + _input.DateField + " &gt;= TIMESTAMP('" + startDate.ToString("yyyy-MM-dd HH:mm:ss")
                                    + "') AND " + _input.DateField + " &lt; TIMESTAMP('" + endDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
                                break;

                            case FunctionName.ApplyTimeRangeFilterOracle:
                                if (_input.IsFieldAFunction)
                                {
                                    outCondition = "(" + _input.DateField + " BETWEEN TO_DATE('" + startDate.ToString("yyyy-MM-dd HH:mm:ss")
                                        + "', 'YYYY-MM-DD hh24:mi:ss') AND TO_DATE('" + endDate.ToString("yyyy-MM-dd HH:mm:ss") + "', 'YYYY-MM-DD hh24:mi:ss'))";
                                }
                                else
                                {
                                    outCondition = "(" + _input.DateField + " &gt;= TO_DATE('" + startDate.ToString("yyyy-MM-dd HH:mm:ss")
                                        + "', 'YYYY-MM-DD hh24:mi:ss') AND " + _input.DateField
                                        + " &lt; TO_DATE('" + endDate.ToString("yyyy-MM-dd HH:mm:ss") + "', 'YYYY-MM-DD hh24:mi:ss') )";
                                }
                                break;
                        }
                    }

                    if (i == 0)
                    {
                        output = outCondition;
                    }
                    else
                    {
                        output = "(" + output + " OR " + outCondition + ")";
                    }
                }
                
                Match match = _input.Match;
                modifiedQuery = modifiedQuery.Substring(0, match.Index)
                    + output + modifiedQuery.Substring(match.Index + match.Length);

                IsDateFilterFunction(modifiedQuery, out _input); // see if there is any other occurence of this function in the query
            }

            return modifiedQuery;
        }

        private string GetMatchValue(Match match, string groupName, bool canBeEmpty)
        {
            string value = match.Groups[groupName].Value.Trim(); ;
            if (value.Length == 0 &amp;&amp; !canBeEmpty)
            {
                throw new ArgumentException("ApplyTimeRangeFilter: Parameter [" + groupName + "] cannot be empty.");
            }
            return value;
        }

    }
}
</CustomSQLFunctionScripts>
  <PivotGroupingSettings Enable="true" PivotColumn="State">
    <SortyByColumn>Count</SortyByColumn>
  </PivotGroupingSettings>
  <QuerySQL><![CDATA[
--[FileName:"T:\Dashboard\Jobs\PCAM\15-min\BarnumSN_VAT_Exceptions.lasx"]------
----------<VARIABLES>------------
var TIMEFILTER = "All"
var FILEFILTER = "@{VFSRFILEFILTER2}"
---Begin Main Query---
using csv with
select * 
FROM
	'${FILEFILTER}'
WHERE
	state not like '%Complete'
begin post
Using CSV with
SELECT
	Number,
	Link,
	State,
	Area as u_Functional_Area,
	Location,
	Process as u_Process,
	Priority,
	Priority as Barnum_Priority,
	AssignedTo as Assigned_to_Person,
	to_localtime(CreatedOn) as Created_On,
	to_localtime(UpdatedOn) as sys_Updated_on,
	NeedDate as Due_Date,
	Category,
	Category as Change_Type,
	Description as Short_Description,
	Description,
	to_localtime(UpdatedOn) as Resolved_At,
	to_localtime(UpdatedOn) as Closed_At,
	Requestor,
	ROI,
	CEID,
	EstimatedDelivery,
	LastUpdateBy,
	LogUpdate,
	LogType
FROM
	%{output}
end post
]]></QuerySQL>
</QueryConfig>